// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: context
func (_m *Account) Create(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: context
func (_m *Account) DeleteByID(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: context
func (_m *Account) FindByID(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields: context
func (_m *Account) GetAccounts(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterRoutes provides a mock function with given fields: g
func (_m *Account) RegisterRoutes(g *echo.Group) {
	_m.Called(g)
}

// Update provides a mock function with given fields: context
func (_m *Account) Update(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
