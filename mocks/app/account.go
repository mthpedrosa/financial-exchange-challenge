// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/mthpedrosa/financial-exchange-challenge/internal/account/domain/dto"
	entity "github.com/mthpedrosa/financial-exchange-challenge/internal/account/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *Account) Create(ctx context.Context, request dto.CreateAccountRequest) (dto.CreateAcountResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 dto.CreateAcountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateAccountRequest) (dto.CreateAcountResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateAccountRequest) dto.CreateAcountResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(dto.CreateAcountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateAccountRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *Account) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, email
func (_m *Account) FindByID(ctx context.Context, email string) (entity.Account, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Account, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Account); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: ctx, filters
func (_m *Account) GetAccounts(ctx context.Context, filters dto.AccountFilter) ([]dto.AccountListDTO, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []dto.AccountListDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AccountFilter) ([]dto.AccountListDTO, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AccountFilter) []dto.AccountListDTO); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AccountListDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AccountFilter) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, request
func (_m *Account) Update(ctx context.Context, id string, request dto.UpdateAccountRequest) (entity.Account, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dto.UpdateAccountRequest) (entity.Account, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, dto.UpdateAccountRequest) entity.Account); ok {
		r0 = rf(ctx, id, request)
	} else {
		r0 = ret.Get(0).(entity.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, dto.UpdateAccountRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
